# 
### 사용자 정의 위젯 > Stateless widget
위젯의 형태는 Stateful widget과 Stateless widget으로 나뉜다. Stateful  widget은 내부에서 값이 변경 되었을 때 위젯 자체에서 다시 렌더링을 실행시킬 수 있다.  Stateless widget은 내부에서 값이 변경되어도 위젯 자체적으로는 다시 렌더링을 할 수 없다. 

아래는 stateless widget 선언 과정이다. 
```
import 'package:flutter/material.dart';

void main(){
	runApp(App()); // 1️⃣ App() 위젯을 첫 화면으로 지정
}

class App extends StatelessWidget{ // 2️⃣ Stateless widget 선언
	@override
	Widget build(BuildContext context){ // 3️⃣ 위젯의 UI 구성 
	}
}
```

flutter에서 기본으로 제공하는 StatelessWidget이라는 클래스를 사용자 정의 위젯(App())이 상속받는다. 이후, build()함수를 필수적으로 오버라이드하게 되어, 화면에 나타내고 싶은 Widget을 입력한다.

 ### 위젯의 Life Cycle 
위젯의 Life Cycle(생명주기)는 위젯이 화면에 그려지는 순간부터 삭제되는 순간까지의 주기를 의미한다. 

#### Stateless Widget Life Cycle
먼저, Stateless Widget의 생명주기는 StatelessWidget이 빌드되면 생성자가 실행된다. 이어서 필수로 오버라이드 해야하는 build()함수가 실행된다. 마지막으로 build()함수에 반환한 위젯이 화면에 렌더링 된다. 
**주의: StatelessWidget은 생성될 때 build()함수가 한 번 실행되고 절대로 다시 실행되지 않는다.

#### Stateful Widget Life Cycle
위젯 내부에서 자체적으로 데이터를 변경하여 build()함수를 재실행해야하는 상황이 발생할 수 있다. 
다음은 Stateful Widget의 생명주기(상태 변경이 없는 생명주기)와 같다. 
1️⃣ StatefulWidget 생성자가 실행
	->  생성자의 매개변수가 변경 되었을 때는 위젯을 업데이트하는 함수가 실행된다. 
2️⃣ State 생성하는 함수 실행 <- 필수로 override해야하는 함수 
3️⃣ State가 생성되면 initState()가 실행됨
4️⃣ dirty (build()가 재실행되어야하는 상태) -> clean -> deactivate (build()가 실행 완료된 상태)

5️⃣ dispose() -> 위젯이 영구적으로 삭제될 때 실행

**Stateful Widget의 예시 코드는 main.dart에 첨부 

---------------
참조: 코드팩토리의 플러터 프로그래밍


